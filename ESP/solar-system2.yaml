esphome:
  name: power2
  friendly_name: Power2
esp32:
  board: esp32dev
  framework:
    type: arduino
logger:
  level: WARN
api:
  encryption:
    key: "myKey"
ota:
  platform: esphome
  password: "myPass"
wifi:
  networks:
  - ssid: WiFi-Battery
    hidden: true
  manual_ip:
    static_ip: 10.21.55.31
    gateway: 10.21.55.1
    subnet: 255.255.255.0 
    dns1: 10.21.55.1
  output_power: 20dB
  power_save_mode: none
uart:
  - rx_pin: 16
    tx_pin: 17
    baud_rate: 9600
    id: uart_1
  - rx_pin: 18
    tx_pin: 19
    baud_rate: 9600
    id: uart_2
modbus:
  - uart_id: uart_1
    send_wait_time: 200ms
    id: modbus_1
  - uart_id: uart_2
    send_wait_time: 300ms
    id: modbus_2
modbus_controller:
  command_throttle: 100ms
  id: modbus_ctrl1
  update_interval: 200ms
  address: 0x1
  modbus_id: modbus_2
i2c:
  sda: GPIO27
  scl: GPIO14
  scan: true
  id: bus_a
ads1115:
  - address: 0x48
    continuous_mode: true
sensor:
  - platform: wifi_signal
    name: "wifi-power2"
    update_interval: 60s
  - platform: modbus_controller
    modbus_controller_id: modbus_ctrl1
    name: "Battery-Current"
    register_type: holding
    address: 0x0056
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: A
    force_update: true
    filters:
      - exponential_moving_average:
          alpha: 0.1  # Adjust this value based on testing 
      - throttle: 1000ms
  - platform: pzemac
    modbus_id: modbus_1
    id: pzemac_3
    current:
      name: "10kw-Current"
      id: pzem_current
      accuracy_decimals: 1
      filters:
        - lambda: |-
            if (x > 120.0) { return 0.0; } else { return x; }
    voltage:
      name: "10kw-Voltage"
      id: pzem_voltage
      accuracy_decimals: 0
      filters:
        - lambda: |-
            id(last_update_time) = millis();
            if (x > 270.0) { return 0.0; } else { return x; }
    energy:
      name: "10kw-Energy"
      unit_of_measurement: Wh
      device_class: "energy"
      state_class: "total_increasing"
    power:
      name: "10kw-Power"
      id: pzem_power
      accuracy_decimals: 0
      filters:
        - lambda: |-
            if (x > 31000.0) { return 0.0; } else { return x; }
    frequency:
      name: "10kw-Hz"
    power_factor:
      name: "10kw-PF"
    update_interval: 1s
  - platform: ads1115
    multiplexer: 'A2_GND'
    gain: 6.144
    name: "Sunlight-PV"
    update_interval: 500ms
    filters:
      - exponential_moving_average:
          alpha: 0.02  # Adjust this value based on testing
      - throttle: 1s
    force_update: true
  - platform: template
    name: "10kw-Voltage-Safe"
    lambda: |-
      const int timeout_ms = 1500; 
      if ((millis() - id(last_update_time)) < timeout_ms) {
      return id(pzem_voltage).state; 
      } else { return NAN; }
    accuracy_decimals: 0
    update_interval: 1s
    unit_of_measurement: V
  - platform: template
    name: "10kw-Current-Safe"
    lambda: |-
      const int timeout_ms = 1500; 
      if ((millis() - id(last_update_time)) < timeout_ms) {
      return id(pzem_current).state; 
      } else { return NAN; }
    accuracy_decimals: 1
    update_interval: 1s
    unit_of_measurement: A
  - platform: template
    name: "10kw-Power-Safe"
    lambda: |-
      const int timeout_ms = 1500; 
      if ((millis() - id(last_update_time)) < timeout_ms) {
      return id(pzem_power).state; 
      } else { return NAN; }
    accuracy_decimals: 0
    update_interval: 1s
    unit_of_measurement: W
globals:
  - id: last_update_time
    type: int
    restore_value: no
    initial_value: "0"

switch:
  - platform: uart
    uart_id: uart_1
    name: "10kw-Reset" 
    data: [0x01, 0x42, 0x80, 0x11]
  - platform: uart
    uart_id: uart_2
    name: "Battery-Reset" 
    data: [0x01, 0x42, 0x80, 0x11]

